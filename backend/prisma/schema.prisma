// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int        @id @default(autoincrement())
  login         String     @unique @db.VarChar(255)
  password      String     @db.VarChar(255)
  fullName      String     @map("full_name") @db.VarChar(255)
  email         String     @unique
  emailVerified Boolean    @default(false) @map("email_verified")
  avatar        String
  rating        Int        @default(0)
  role          Role       @default(USER)
  refreshToken  String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  posts         Post[]
  favorites     Favorite[]
  comments      Comment[]
  likes         Like[]
  otps          Otp[]

  @@map("users")
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Otp {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  token     String
  type      OtpType
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@map("otp")
}

enum Status {
  ACTIVE
  INACTIVE
}

model Post {
  id         Int            @id @default(autoincrement())
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int            @map("author_id")
  title      String         @db.VarChar(255)
  status     Status         @default(ACTIVE)
  content    String
  rating     Int            @default(0)
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  categories CategoryPost[]
  favorites  Favorite[]
  comments   Comment[]
  likes      Like[]

  @@map("posts")
}

model Favorite {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("author_id")
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int  @map("post_id")

  @@unique([userId, postId])
  @@map("favorites")
}

model Category {
  id          Int            @id @default(autoincrement())
  title       String         @unique @db.VarChar(255)
  description String?
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  posts       CategoryPost[]

  @@map("categories")
}

model CategoryPost {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int      @map("post_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id")

  @@unique([postId, categoryId])
  @@map("category_post")
}

model Comment {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int      @map("author_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int      @map("post_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  likes     Like[]

  @@map("comments")
}

enum LikeType {
  LIKE
  DISLIKE
}

model Like {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int      @map("author_id")
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?     @map("post_id")
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?     @map("comment_id")
  type      LikeType
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([authorId, postId])
  @@unique([authorId, commentId])
  @@map("likes")
}
